{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,MAAOC,SAASC,cAAc,gBAC9BC,KAAMF,SAASC,cAAc,eAC7BE,OAAQH,SAASC,cAAc,iBAC/BG,UAAWJ,SAASC,cAAc,WAyBpC,SAASI,EAAcC,EAAUP,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACF,WAAUP,MAAOA,EAAQO,IAElCG,EAAO,CAACH,WAAUP,MAAOA,EAAQO,MAElCP,EAAQO,MAhCfR,EAAKM,UAAUU,iBAAiB,SAGhC,SAAsBC,GACpBA,EAAEC,iBAEFH,YAAW,WACT,IAAI,IAAII,EAAI,EAAGA,GAAKC,OAAOpB,EAAKK,OAAOgB,OAAQF,GAAK,EAGlDZ,EAAcY,EAAGC,OAAOpB,EAAKI,KAAKiB,QACjCC,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUP,EAAKsB,EAALtB,MACjBH,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANzB,EAAM,UAE9D0B,OAAM,SAAAJ,G,IAAGf,EAAQe,EAARf,SAAUP,EAAKsB,EAALtB,MAClBH,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAflB,EAAS,QAAYkB,OAANzB,EAAM,YAG7DmB,OAAOpB,EAAKC,MAAMoB,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst refs = {\n  delay: document.querySelector('[name=delay]'),\n  step: document.querySelector('[name=step]'),\n  amount: document.querySelector('[name=amount]'),\n  createBtn: document.querySelector('button'),\n}\n\nrefs.createBtn.addEventListener('click', showPromises);\n\n\nfunction showPromises(e) {\n  e.preventDefault();\n  // call for loop after tne number of ms that the refs.delay contains\n  setTimeout(() => {\n    for(let i = 1; i <= Number(refs.amount.value); i += 1) {\n      // create i promises and pass them sequence number and delay before calling\n      // use Notify lib to inform Success or Failure\n      createPromise(i, Number(refs.step.value))\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }\n  }, Number(refs.delay.value));\n}\n\n// creating Promise with random resolve or reject result\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    // call the Promise in delay after calling the previous Promise\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay: delay * position});\n      } else {\n        reject({position, delay: delay * position});\n      }\n    }, delay * position)\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","createBtn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","i","Number","value","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c12af92d.js.map"}