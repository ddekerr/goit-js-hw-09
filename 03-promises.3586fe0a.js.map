{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,MAAOC,SAASC,cAAc,gBAC9BC,KAAMF,SAASC,cAAc,eAC7BE,OAAQH,SAASC,cAAc,iBAC/BG,UAAWJ,SAASC,cAAc,WA0BpC,SAASI,EAAcC,EAAUP,EAAOG,GACtC,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAkC,IAAbP,EAAiBP,EAAQA,EAAQG,GAAQI,EAAW,GAE/EQ,YAAW,WACLJ,EACFF,EAAQ,CAACF,WAAUP,MAAOc,IAE1BJ,EAAO,CAACH,WAAUP,MAAOc,MAE1BA,MAlCPf,EAAKM,UAAUW,iBAAiB,SAGhC,SAAsBC,GACpBA,EAAEC,iBAGF,IAAI,IAAIC,EAAI,EAAGA,GAAKC,OAAOrB,EAAKK,OAAOiB,OAAQF,GAAK,EAGlDb,EAAca,EAAGC,OAAOrB,EAAKC,MAAMqB,OAAQD,OAAOrB,EAAKI,KAAKkB,QAC3DC,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUP,EAAKuB,EAALvB,MACjBH,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAAN1B,EAAM,UAE9D2B,OAAM,SAAAJ,G,IAAGhB,EAAQgB,EAARhB,SAAUP,EAAKuB,EAALvB,MAClBH,EAAA2B,OAAOI,QAAQ,sBAAqCF,OAAfnB,EAAS,QAAYmB,OAAN1B,EAAM,UAI9DC,SAASC,cAAc,SAAS2B,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst refs = {\n  delay: document.querySelector('[name=delay]'),\n  step: document.querySelector('[name=step]'),\n  amount: document.querySelector('[name=amount]'),\n  createBtn: document.querySelector('button'),\n}\n\nrefs.createBtn.addEventListener('click', showPromises);\n\n\nfunction showPromises(e) {\n  e.preventDefault();\n\n  // call for loop after tne number of ms that the refs.delay contains\n  for(let i = 1; i <= Number(refs.amount.value); i += 1) {\n    // create i promises and pass them sequence number and delay before calling\n    // use Notify lib to inform Success or Failure\n    createPromise(i, Number(refs.delay.value), Number(refs.step.value))\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n\n  document.querySelector('.form').reset();\n}\n\n// creating Promise with random resolve or reject result\nfunction createPromise(position, delay, step) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const promiseCalingDelay = position === 1 ? delay : delay + step * (position - 1);\n    // call the Promise in delay after calling the previous Promise\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay: promiseCalingDelay});\n      } else {\n        reject({position, delay: promiseCalingDelay});\n      }\n    }, promiseCalingDelay)\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","createBtn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","promiseCalingDelay","setTimeout","addEventListener","e","preventDefault","i","Number","value","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.3586fe0a.js.map"}